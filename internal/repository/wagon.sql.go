// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: wagon.sql

package repository

import (
	"context"
)

const createWagon = `-- name: CreateWagon :one
INSERT INTO wagons (train_id, wagon_number, class_type, total_seats, created_at)
VALUES ($1, $2, $3, $4, now())
RETURNING id, train_id, wagon_number, class_type, total_seats, created_at, updated_at
`

type CreateWagonParams struct {
	TrainID     int64     `db:"train_id" json:"train_id"`
	WagonNumber int32     `db:"wagon_number" json:"wagon_number"`
	ClassType   TipeClass `db:"class_type" json:"class_type"`
	TotalSeats  int32     `db:"total_seats" json:"total_seats"`
}

func (q *Queries) CreateWagon(ctx context.Context, arg CreateWagonParams) (Wagon, error) {
	row := q.db.QueryRow(ctx, createWagon,
		arg.TrainID,
		arg.WagonNumber,
		arg.ClassType,
		arg.TotalSeats,
	)
	var i Wagon
	err := row.Scan(
		&i.ID,
		&i.TrainID,
		&i.WagonNumber,
		&i.ClassType,
		&i.TotalSeats,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const decreaseWagonSeat = `-- name: DecreaseWagonSeat :exec
UPDATE wagons
SET total_seats = total_seats - 1,
updated_at = NOW()
WHERE id = $1 AND total_seats > 0
`

func (q *Queries) DecreaseWagonSeat(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, decreaseWagonSeat, id)
	return err
}

const deleteWagon = `-- name: DeleteWagon :exec
DELETE FROM wagons
WHERE id = $1
`

func (q *Queries) DeleteWagon(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteWagon, id)
	return err
}

const getWagon = `-- name: GetWagon :one
SELECT id, train_id, wagon_number, class_type, total_seats, created_at, updated_at FROM wagons
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetWagon(ctx context.Context, id int64) (Wagon, error) {
	row := q.db.QueryRow(ctx, getWagon, id)
	var i Wagon
	err := row.Scan(
		&i.ID,
		&i.TrainID,
		&i.WagonNumber,
		&i.ClassType,
		&i.TotalSeats,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listWagons = `-- name: ListWagons :many
SELECT id, train_id, wagon_number, class_type, total_seats, created_at, updated_at FROM wagons
WHERE train_id = $1
ORDER BY id
`

func (q *Queries) ListWagons(ctx context.Context, trainID int64) ([]Wagon, error) {
	rows, err := q.db.Query(ctx, listWagons, trainID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Wagon{}
	for rows.Next() {
		var i Wagon
		if err := rows.Scan(
			&i.ID,
			&i.TrainID,
			&i.WagonNumber,
			&i.ClassType,
			&i.TotalSeats,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWagon = `-- name: UpdateWagon :exec
UPDATE wagons
  set train_id = $2,
  wagon_number = $3,
  class_type = $4,
  total_seats = $5,
  updated_at = NOW()
WHERE id = $1
`

type UpdateWagonParams struct {
	ID          int64     `db:"id" json:"id"`
	TrainID     int64     `db:"train_id" json:"train_id"`
	WagonNumber int32     `db:"wagon_number" json:"wagon_number"`
	ClassType   TipeClass `db:"class_type" json:"class_type"`
	TotalSeats  int32     `db:"total_seats" json:"total_seats"`
}

func (q *Queries) UpdateWagon(ctx context.Context, arg UpdateWagonParams) error {
	_, err := q.db.Exec(ctx, updateWagon,
		arg.ID,
		arg.TrainID,
		arg.WagonNumber,
		arg.ClassType,
		arg.TotalSeats,
	)
	return err
}
