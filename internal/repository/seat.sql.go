// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: seat.sql

package repository

import (
	"context"
)

const createSeat = `-- name: CreateSeat :one
INSERT INTO seats (wagon_id, seat_number, seat_row, is_available)
VALUES ($1, $2, $3, $4)
RETURNING id, wagon_id, seat_number, seat_row, is_available, created_at, updated_at
`

type CreateSeatParams struct {
	WagonID     *int64  `db:"wagon_id" json:"wagon_id"`
	SeatNumber  int32   `db:"seat_number" json:"seat_number"`
	SeatRow     SeatRow `db:"seat_row" json:"seat_row"`
	IsAvailable *bool   `db:"is_available" json:"is_available"`
}

func (q *Queries) CreateSeat(ctx context.Context, arg CreateSeatParams) (Seat, error) {
	row := q.db.QueryRow(ctx, createSeat,
		arg.WagonID,
		arg.SeatNumber,
		arg.SeatRow,
		arg.IsAvailable,
	)
	var i Seat
	err := row.Scan(
		&i.ID,
		&i.WagonID,
		&i.SeatNumber,
		&i.SeatRow,
		&i.IsAvailable,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSeat = `-- name: DeleteSeat :exec
DELETE FROM seats
WHERE id = $1
`

func (q *Queries) DeleteSeat(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteSeat, id)
	return err
}

const getSeat = `-- name: GetSeat :one
SELECT id, wagon_id, seat_number, seat_row, is_available, created_at, updated_at FROM seats
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSeat(ctx context.Context, id int64) (Seat, error) {
	row := q.db.QueryRow(ctx, getSeat, id)
	var i Seat
	err := row.Scan(
		&i.ID,
		&i.WagonID,
		&i.SeatNumber,
		&i.SeatRow,
		&i.IsAvailable,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listSeats = `-- name: ListSeats :many
SELECT id, wagon_id, seat_number, seat_row, is_available, created_at, updated_at FROM seats
ORDER BY id
`

func (q *Queries) ListSeats(ctx context.Context) ([]Seat, error) {
	rows, err := q.db.Query(ctx, listSeats)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Seat{}
	for rows.Next() {
		var i Seat
		if err := rows.Scan(
			&i.ID,
			&i.WagonID,
			&i.SeatNumber,
			&i.SeatRow,
			&i.IsAvailable,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSeat = `-- name: UpdateSeat :exec
UPDATE seats
  set wagon_id = $2,
  seat_number = $3,
  is_available = $4,
  seat_row = $5,
  updated_at = NOW()
WHERE id = $1
`

type UpdateSeatParams struct {
	ID          int64   `db:"id" json:"id"`
	WagonID     *int64  `db:"wagon_id" json:"wagon_id"`
	SeatNumber  int32   `db:"seat_number" json:"seat_number"`
	IsAvailable *bool   `db:"is_available" json:"is_available"`
	SeatRow     SeatRow `db:"seat_row" json:"seat_row"`
}

func (q *Queries) UpdateSeat(ctx context.Context, arg UpdateSeatParams) error {
	_, err := q.db.Exec(ctx, updateSeat,
		arg.ID,
		arg.WagonID,
		arg.SeatNumber,
		arg.IsAvailable,
		arg.SeatRow,
	)
	return err
}
