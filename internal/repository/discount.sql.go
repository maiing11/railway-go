// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: discount.sql

package repository

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const applyDiscountToReservation = `-- name: ApplyDiscountToReservation :exec
INSERT INTO reservation_discounts (reservation_id, discount_id)
VALUES ($1, $2)
`

type ApplyDiscountToReservationParams struct {
	ReservationID uuid.UUID `db:"reservation_id" json:"reservation_id"`
	DiscountID    uuid.UUID `db:"discount_id" json:"discount_id"`
}

func (q *Queries) ApplyDiscountToReservation(ctx context.Context, arg ApplyDiscountToReservationParams) error {
	_, err := q.db.Exec(ctx, applyDiscountToReservation, arg.ReservationID, arg.DiscountID)
	return err
}

const createDiscountCode = `-- name: CreateDiscountCode :one
INSERT INTO discount_codes (code, discount_percent, expires_at, max_uses)
VALUES ($1, $2, $3, $4)
RETURNING id, code, discount_percent, max_uses, expires_at, created_at, updated_at
`

type CreateDiscountCodeParams struct {
	Code            string           `db:"code" json:"code"`
	DiscountPercent int32            `db:"discount_percent" json:"discount_percent"`
	ExpiresAt       pgtype.Timestamp `db:"expires_at" json:"expires_at"`
	MaxUses         int32            `db:"max_uses" json:"max_uses"`
}

func (q *Queries) CreateDiscountCode(ctx context.Context, arg CreateDiscountCodeParams) (DiscountCode, error) {
	row := q.db.QueryRow(ctx, createDiscountCode,
		arg.Code,
		arg.DiscountPercent,
		arg.ExpiresAt,
		arg.MaxUses,
	)
	var i DiscountCode
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.DiscountPercent,
		&i.MaxUses,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getDiscountByCode = `-- name: GetDiscountByCode :one
SELECT id, code, discount_percent, max_uses, expires_at, created_at, updated_at FROM discount_codes
WHERE code = $1 AND expires_at > NOW() AND max_uses > 0
`

func (q *Queries) GetDiscountByCode(ctx context.Context, code string) (DiscountCode, error) {
	row := q.db.QueryRow(ctx, getDiscountByCode, code)
	var i DiscountCode
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.DiscountPercent,
		&i.MaxUses,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getDiscountsForReservation = `-- name: GetDiscountsForReservation :many
SELECT dc.id, dc.code, dc.discount_percent, dc.expires_at, dc.max_uses
FROM discount_codes dc
JOIN reservation_discounts rd ON dc.id = rd.discount_id
WHERE rd.reservation_id = $1
`

type GetDiscountsForReservationRow struct {
	ID              uuid.UUID        `db:"id" json:"id"`
	Code            string           `db:"code" json:"code"`
	DiscountPercent int32            `db:"discount_percent" json:"discount_percent"`
	ExpiresAt       pgtype.Timestamp `db:"expires_at" json:"expires_at"`
	MaxUses         int32            `db:"max_uses" json:"max_uses"`
}

func (q *Queries) GetDiscountsForReservation(ctx context.Context, reservationID uuid.UUID) ([]GetDiscountsForReservationRow, error) {
	rows, err := q.db.Query(ctx, getDiscountsForReservation, reservationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetDiscountsForReservationRow{}
	for rows.Next() {
		var i GetDiscountsForReservationRow
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.DiscountPercent,
			&i.ExpiresAt,
			&i.MaxUses,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const reduceDiscountUsage = `-- name: ReduceDiscountUsage :exec
UPDATE discount_codes
SET max_uses = max_uses - 1
WHERE id = $1
`

func (q *Queries) ReduceDiscountUsage(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, reduceDiscountUsage, id)
	return err
}

const updateDiscountCode = `-- name: UpdateDiscountCode :exec
UPDATE discount_codes
SET code = $2,
discount_percent = $3,
expires_at = $4,
max_uses = $5,
updated_at = NOW()
WHERE id = $1
`

type UpdateDiscountCodeParams struct {
	ID              uuid.UUID        `db:"id" json:"id"`
	Code            string           `db:"code" json:"code"`
	DiscountPercent int32            `db:"discount_percent" json:"discount_percent"`
	ExpiresAt       pgtype.Timestamp `db:"expires_at" json:"expires_at"`
	MaxUses         int32            `db:"max_uses" json:"max_uses"`
}

func (q *Queries) UpdateDiscountCode(ctx context.Context, arg UpdateDiscountCodeParams) error {
	_, err := q.db.Exec(ctx, updateDiscountCode,
		arg.ID,
		arg.Code,
		arg.DiscountPercent,
		arg.ExpiresAt,
		arg.MaxUses,
	)
	return err
}
