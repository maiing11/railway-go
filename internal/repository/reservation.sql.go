// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: reservation.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createReservation = `-- name: CreateReservation :one
INSERT INTO reservations (
   passenger_id, schedule_id, seat_number, booking_date, payment_id, status
) VALUES (
    $1, $2, $3, $4, $5, $6
)
RETURNING id, passenger_id, schedule_id, seat_number, booking_date, payment_id, status, created_at, updated_at
`

type CreateReservationParams struct {
	PassengerID int64                 `db:"passenger_id" json:"passenger_id"`
	ScheduleID  int64                 `db:"schedule_id" json:"schedule_id"`
	SeatNumber  *int32                `db:"seat_number" json:"seat_number"`
	BookingDate pgtype.Timestamp      `db:"booking_date" json:"booking_date"`
	PaymentID   pgtype.UUID           `db:"payment_id" json:"payment_id"`
	Status      NullStatusReservation `db:"status" json:"status"`
}

func (q *Queries) CreateReservation(ctx context.Context, arg CreateReservationParams) (Reservation, error) {
	row := q.db.QueryRow(ctx, createReservation,
		arg.PassengerID,
		arg.ScheduleID,
		arg.SeatNumber,
		arg.BookingDate,
		arg.PaymentID,
		arg.Status,
	)
	var i Reservation
	err := row.Scan(
		&i.ID,
		&i.PassengerID,
		&i.ScheduleID,
		&i.SeatNumber,
		&i.BookingDate,
		&i.PaymentID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteReservation = `-- name: DeleteReservation :exec
DELETE FROM reservations
WHERE id = $1
`

func (q *Queries) DeleteReservation(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteReservation, id)
	return err
}

const getReservation = `-- name: GetReservation :one
SELECT id, passenger_id, schedule_id, seat_number, booking_date, payment_id, status, created_at, updated_at FROM  reservations
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetReservation(ctx context.Context, id pgtype.UUID) (Reservation, error) {
	row := q.db.QueryRow(ctx, getReservation, id)
	var i Reservation
	err := row.Scan(
		&i.ID,
		&i.PassengerID,
		&i.ScheduleID,
		&i.SeatNumber,
		&i.BookingDate,
		&i.PaymentID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listReservations = `-- name: ListReservations :many
SELECT id, passenger_id, schedule_id, seat_number, booking_date, payment_id, status, created_at, updated_at FROM reservations
WHERE
 passenger_id = $1 OR
 schedule_id = $2
ORDER BY booking_date
LIMIT $3
OFFSET $4
`

type ListReservationsParams struct {
	PassengerID int64 `db:"passenger_id" json:"passenger_id"`
	ScheduleID  int64 `db:"schedule_id" json:"schedule_id"`
	Limit       int32 `db:"limit" json:"limit"`
	Offset      int32 `db:"offset" json:"offset"`
}

func (q *Queries) ListReservations(ctx context.Context, arg ListReservationsParams) ([]Reservation, error) {
	rows, err := q.db.Query(ctx, listReservations,
		arg.PassengerID,
		arg.ScheduleID,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Reservation{}
	for rows.Next() {
		var i Reservation
		if err := rows.Scan(
			&i.ID,
			&i.PassengerID,
			&i.ScheduleID,
			&i.SeatNumber,
			&i.BookingDate,
			&i.PaymentID,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateReservation = `-- name: UpdateReservation :exec
UPDATE reservations
  set  passenger_id = $2 , schedule_id = $3, seat_number = $4, booking_date = $5, payment_id = $6, status = $7
WHERE id = $1
`

type UpdateReservationParams struct {
	ID          pgtype.UUID           `db:"id" json:"id"`
	PassengerID int64                 `db:"passenger_id" json:"passenger_id"`
	ScheduleID  int64                 `db:"schedule_id" json:"schedule_id"`
	SeatNumber  *int32                `db:"seat_number" json:"seat_number"`
	BookingDate pgtype.Timestamp      `db:"booking_date" json:"booking_date"`
	PaymentID   pgtype.UUID           `db:"payment_id" json:"payment_id"`
	Status      NullStatusReservation `db:"status" json:"status"`
}

func (q *Queries) UpdateReservation(ctx context.Context, arg UpdateReservationParams) error {
	_, err := q.db.Exec(ctx, updateReservation,
		arg.ID,
		arg.PassengerID,
		arg.ScheduleID,
		arg.SeatNumber,
		arg.BookingDate,
		arg.PaymentID,
		arg.Status,
	)
	return err
}
