// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: payment.sql

package repository

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const completePayment = `-- name: CompletePayment :exec
UPDATE payments
  set payment_status = 'success', payment_date = NOW()
WHERE id = $1 AND payment_status = 'pending'
`

func (q *Queries) CompletePayment(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, completePayment, id)
	return err
}

const createPayment = `-- name: CreatePayment :exec
INSERT INTO payments (
    reservation_id, payment_method, amount, transaction_id, payment_date, gateway_response, payment_status
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
)
`

type CreatePaymentParams struct {
	ReservationID   uuid.UUID        `db:"reservation_id" json:"reservation_id"`
	PaymentMethod   string           `db:"payment_method" json:"payment_method"`
	Amount          int64            `db:"amount" json:"amount"`
	TransactionID   string           `db:"transaction_id" json:"transaction_id"`
	PaymentDate     pgtype.Timestamp `db:"payment_date" json:"payment_date"`
	GatewayResponse *string          `db:"gateway_response" json:"gateway_response"`
	PaymentStatus   string           `db:"payment_status" json:"payment_status"`
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) error {
	_, err := q.db.Exec(ctx, createPayment,
		arg.ReservationID,
		arg.PaymentMethod,
		arg.Amount,
		arg.TransactionID,
		arg.PaymentDate,
		arg.GatewayResponse,
		arg.PaymentStatus,
	)
	return err
}

const deletePayment = `-- name: DeletePayment :exec
DELETE FROM payments
WHERE id = $1
`

func (q *Queries) DeletePayment(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deletePayment, id)
	return err
}

const failPayment = `-- name: FailPayment :exec
UPDATE payments
  set payment_status = 'failed', payment_date = NOW()
WHERE id = $1 AND payment_status = 'pending'
`

func (q *Queries) FailPayment(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, failPayment, id)
	return err
}

const getExpiredPayments = `-- name: GetExpiredPayments :many
SELECT reservation_id FROM payments
WHERE payment_status = 'pending' AND creaate_at < NOW() - INTERVAL '15 minutes'
`

func (q *Queries) GetExpiredPayments(ctx context.Context) ([]uuid.UUID, error) {
	rows, err := q.db.Query(ctx, getExpiredPayments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []uuid.UUID{}
	for rows.Next() {
		var reservation_id uuid.UUID
		if err := rows.Scan(&reservation_id); err != nil {
			return nil, err
		}
		items = append(items, reservation_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPayment = `-- name: GetPayment :one
SELECT id, reservation_id, payment_method, amount, transaction_id, payment_date, gateway_response, payment_status, created_at, updated_at FROM  payments
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPayment(ctx context.Context, id uuid.UUID) (Payment, error) {
	row := q.db.QueryRow(ctx, getPayment, id)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.ReservationID,
		&i.PaymentMethod,
		&i.Amount,
		&i.TransactionID,
		&i.PaymentDate,
		&i.GatewayResponse,
		&i.PaymentStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listPayments = `-- name: ListPayments :many
SELECT id, reservation_id, payment_method, amount, transaction_id, payment_date, gateway_response, payment_status, created_at, updated_at FROM payments
ORDER BY id
`

func (q *Queries) ListPayments(ctx context.Context) ([]Payment, error) {
	rows, err := q.db.Query(ctx, listPayments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Payment{}
	for rows.Next() {
		var i Payment
		if err := rows.Scan(
			&i.ID,
			&i.ReservationID,
			&i.PaymentMethod,
			&i.Amount,
			&i.TransactionID,
			&i.PaymentDate,
			&i.GatewayResponse,
			&i.PaymentStatus,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePayment = `-- name: UpdatePayment :exec
UPDATE payments
  set reservation_id = $2,
  payment_method = $3,
  amount = $4,
  transaction_id = $5,
  payment_date = $6,
  gateway_response = $7,
  payment_status = $8
WHERE id = $1
`

type UpdatePaymentParams struct {
	ID              uuid.UUID        `db:"id" json:"id"`
	ReservationID   uuid.UUID        `db:"reservation_id" json:"reservation_id"`
	PaymentMethod   string           `db:"payment_method" json:"payment_method"`
	Amount          int64            `db:"amount" json:"amount"`
	TransactionID   string           `db:"transaction_id" json:"transaction_id"`
	PaymentDate     pgtype.Timestamp `db:"payment_date" json:"payment_date"`
	GatewayResponse *string          `db:"gateway_response" json:"gateway_response"`
	PaymentStatus   string           `db:"payment_status" json:"payment_status"`
}

func (q *Queries) UpdatePayment(ctx context.Context, arg UpdatePaymentParams) error {
	_, err := q.db.Exec(ctx, updatePayment,
		arg.ID,
		arg.ReservationID,
		arg.PaymentMethod,
		arg.Amount,
		arg.TransactionID,
		arg.PaymentDate,
		arg.GatewayResponse,
		arg.PaymentStatus,
	)
	return err
}
