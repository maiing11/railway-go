// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: station.sql

package repository

import (
	"context"
)

const createStation = `-- name: CreateStation :one
INSERT INTO stations (code, station_name)
VALUES ($1, $2)
RETURNING id, code, station_name, created_at, updated_at
`

type CreateStationParams struct {
	Code        string `db:"code" json:"code"`
	StationName string `db:"station_name" json:"station_name"`
}

func (q *Queries) CreateStation(ctx context.Context, arg CreateStationParams) (Station, error) {
	row := q.db.QueryRow(ctx, createStation, arg.Code, arg.StationName)
	var i Station
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.StationName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteStation = `-- name: DeleteStation :exec
DELETE FROM stations
WHERE id = $1
`

func (q *Queries) DeleteStation(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteStation, id)
	return err
}

const getStation = `-- name: GetStation :one
SELECT id, code, station_name, created_at, updated_at FROM stations
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetStation(ctx context.Context, id int64) (Station, error) {
	row := q.db.QueryRow(ctx, getStation, id)
	var i Station
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.StationName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getStationByCode = `-- name: GetStationByCode :one
SELECT id, code, station_name, created_at, updated_at FROM stations
WHERE code = $1 LIMIT 1
`

func (q *Queries) GetStationByCode(ctx context.Context, code string) (Station, error) {
	row := q.db.QueryRow(ctx, getStationByCode, code)
	var i Station
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.StationName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getStationByName = `-- name: GetStationByName :one
SELECT id, code, station_name, created_at, updated_at FROM stations
WHERE station_name = $1 LIMIT 1
`

func (q *Queries) GetStationByName(ctx context.Context, stationName string) (Station, error) {
	row := q.db.QueryRow(ctx, getStationByName, stationName)
	var i Station
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.StationName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listStations = `-- name: ListStations :many
SELECT id, code, station_name, created_at, updated_at FROM stations
ORDER BY id
`

func (q *Queries) ListStations(ctx context.Context) ([]Station, error) {
	rows, err := q.db.Query(ctx, listStations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Station{}
	for rows.Next() {
		var i Station
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.StationName,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStation = `-- name: UpdateStation :exec
UPDATE stations
  set code = $2,
  station_name = $3,
  updated_at = NOW()
WHERE id = $1
`

type UpdateStationParams struct {
	ID          int64  `db:"id" json:"id"`
	Code        string `db:"code" json:"code"`
	StationName string `db:"station_name" json:"station_name"`
}

func (q *Queries) UpdateStation(ctx context.Context, arg UpdateStationParams) error {
	_, err := q.db.Exec(ctx, updateStation, arg.ID, arg.Code, arg.StationName)
	return err
}
