// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: schedules.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSchedule = `-- name: CreateSchedule :one
INSERT INTO schedules (
   train_id, departure_time, arrival_time, available_seats, price, route_id
) VALUES (
    $1, $2, $3, $4, $5, $6
)
RETURNING id, train_id, route_id, departure_time, arrival_time, available_seats, price, created_at, updated_at
`

type CreateScheduleParams struct {
	TrainID        int64            `db:"train_id" json:"train_id"`
	DepartureTime  pgtype.Timestamp `db:"departure_time" json:"departure_time"`
	ArrivalTime    pgtype.Timestamp `db:"arrival_time" json:"arrival_time"`
	AvailableSeats int32            `db:"available_seats" json:"available_seats"`
	Price          int64            `db:"price" json:"price"`
	RouteID        int64            `db:"route_id" json:"route_id"`
}

func (q *Queries) CreateSchedule(ctx context.Context, arg CreateScheduleParams) (Schedule, error) {
	row := q.db.QueryRow(ctx, createSchedule,
		arg.TrainID,
		arg.DepartureTime,
		arg.ArrivalTime,
		arg.AvailableSeats,
		arg.Price,
		arg.RouteID,
	)
	var i Schedule
	err := row.Scan(
		&i.ID,
		&i.TrainID,
		&i.RouteID,
		&i.DepartureTime,
		&i.ArrivalTime,
		&i.AvailableSeats,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSchedule = `-- name: DeleteSchedule :exec
DELETE FROM schedules
WHERE id = $1
`

func (q *Queries) DeleteSchedule(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteSchedule, id)
	return err
}

const getSchedule = `-- name: GetSchedule :one
SELECT id, train_id, route_id, departure_time, arrival_time, available_seats, price, created_at, updated_at FROM  schedules
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSchedule(ctx context.Context, id int64) (Schedule, error) {
	row := q.db.QueryRow(ctx, getSchedule, id)
	var i Schedule
	err := row.Scan(
		&i.ID,
		&i.TrainID,
		&i.RouteID,
		&i.DepartureTime,
		&i.ArrivalTime,
		&i.AvailableSeats,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listSchedules = `-- name: ListSchedules :many
SELECT id, name, capacity, created_at, updated_at FROM trains
ORDER BY name
`

func (q *Queries) ListSchedules(ctx context.Context) ([]Train, error) {
	rows, err := q.db.Query(ctx, listSchedules)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Train{}
	for rows.Next() {
		var i Train
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Capacity,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSchedule = `-- name: UpdateSchedule :exec
UPDATE schedules
  set train_id = $2,
  route_id = $3,
  departure_time = $4,
  arrival_time = $5,
  price = $6,
  available_seats = $7
WHERE id = $1
`

type UpdateScheduleParams struct {
	ID             int64            `db:"id" json:"id"`
	TrainID        int64            `db:"train_id" json:"train_id"`
	RouteID        int64            `db:"route_id" json:"route_id"`
	DepartureTime  pgtype.Timestamp `db:"departure_time" json:"departure_time"`
	ArrivalTime    pgtype.Timestamp `db:"arrival_time" json:"arrival_time"`
	Price          int64            `db:"price" json:"price"`
	AvailableSeats int32            `db:"available_seats" json:"available_seats"`
}

func (q *Queries) UpdateSchedule(ctx context.Context, arg UpdateScheduleParams) error {
	_, err := q.db.Exec(ctx, updateSchedule,
		arg.ID,
		arg.TrainID,
		arg.RouteID,
		arg.DepartureTime,
		arg.ArrivalTime,
		arg.Price,
		arg.AvailableSeats,
	)
	return err
}
