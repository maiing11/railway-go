// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: route.sql

package repository

import (
	"context"
)

const createRoute = `-- name: CreateRoute :one
INSERT INTO routes (
   source_station, destination_station, travel_time, created_at
) VALUES (
    $1, $2, $3, now()
)
RETURNING id, source_station, destination_station, travel_time, created_at, updated_at
`

type CreateRouteParams struct {
	SourceStation      string `db:"source_station" json:"source_station"`
	DestinationStation string `db:"destination_station" json:"destination_station"`
	TravelTime         int32  `db:"travel_time" json:"travel_time"`
}

func (q *Queries) CreateRoute(ctx context.Context, arg CreateRouteParams) (Route, error) {
	row := q.db.QueryRow(ctx, createRoute, arg.SourceStation, arg.DestinationStation, arg.TravelTime)
	var i Route
	err := row.Scan(
		&i.ID,
		&i.SourceStation,
		&i.DestinationStation,
		&i.TravelTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteRoute = `-- name: DeleteRoute :exec
DELETE FROM routes
WHERE id = $1
`

func (q *Queries) DeleteRoute(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteRoute, id)
	return err
}

const getRoute = `-- name: GetRoute :one
SELECT id, source_station, destination_station, travel_time, created_at, updated_at FROM  routes
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetRoute(ctx context.Context, id int64) (Route, error) {
	row := q.db.QueryRow(ctx, getRoute, id)
	var i Route
	err := row.Scan(
		&i.ID,
		&i.SourceStation,
		&i.DestinationStation,
		&i.TravelTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listRoute = `-- name: ListRoute :many
SELECT id, source_station, destination_station, travel_time, created_at, updated_at FROM routes
ORDER BY id
`

func (q *Queries) ListRoute(ctx context.Context) ([]Route, error) {
	rows, err := q.db.Query(ctx, listRoute)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Route{}
	for rows.Next() {
		var i Route
		if err := rows.Scan(
			&i.ID,
			&i.SourceStation,
			&i.DestinationStation,
			&i.TravelTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRoute = `-- name: UpdateRoute :exec
UPDATE routes
  set source_station = $2,
  destination_station = $3,
  travel_time = $4,
  updated_at = now()
WHERE id = $1
`

type UpdateRouteParams struct {
	ID                 int64  `db:"id" json:"id"`
	SourceStation      string `db:"source_station" json:"source_station"`
	DestinationStation string `db:"destination_station" json:"destination_station"`
	TravelTime         int32  `db:"travel_time" json:"travel_time"`
}

func (q *Queries) UpdateRoute(ctx context.Context, arg UpdateRouteParams) error {
	_, err := q.db.Exec(ctx, updateRoute,
		arg.ID,
		arg.SourceStation,
		arg.DestinationStation,
		arg.TravelTime,
	)
	return err
}
