// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package repository

import (
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type StatusReservation string

const (
	StatusReservationPending  StatusReservation = "pending"
	StatusReservationCanceled StatusReservation = "canceled"
	StatusReservationSuccess  StatusReservation = "success"
)

func (e *StatusReservation) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = StatusReservation(s)
	case string:
		*e = StatusReservation(s)
	default:
		return fmt.Errorf("unsupported scan type for StatusReservation: %T", src)
	}
	return nil
}

type NullStatusReservation struct {
	StatusReservation StatusReservation `json:"status_reservation"`
	Valid             bool              `json:"valid"` // Valid is true if StatusReservation is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullStatusReservation) Scan(value interface{}) error {
	if value == nil {
		ns.StatusReservation, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.StatusReservation.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullStatusReservation) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.StatusReservation), nil
}

type TipeClass string

const (
	TipeClassPremium TipeClass = "premium"
	TipeClassEconomy TipeClass = "economy"
	TipeClassLuxury  TipeClass = "luxury"
)

func (e *TipeClass) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TipeClass(s)
	case string:
		*e = TipeClass(s)
	default:
		return fmt.Errorf("unsupported scan type for TipeClass: %T", src)
	}
	return nil
}

type NullTipeClass struct {
	TipeClass TipeClass `json:"tipe_class"`
	Valid     bool      `json:"valid"` // Valid is true if TipeClass is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTipeClass) Scan(value interface{}) error {
	if value == nil {
		ns.TipeClass, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TipeClass.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTipeClass) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TipeClass), nil
}

type Passenger struct {
	ID        int64            `db:"id" json:"id"`
	Name      string           `db:"name" json:"name"`
	IDNumber  string           `db:"id_number" json:"id_number"`
	UserID    pgtype.UUID      `db:"user_id" json:"user_id"`
	CreatedAt pgtype.Timestamp `db:"created_at" json:"created_at"`
	UpdatedAt pgtype.Timestamp `db:"updated_at" json:"updated_at"`
}

type Payment struct {
	ID              uuid.UUID        `db:"id" json:"id"`
	ReservationID   pgtype.UUID      `db:"reservation_id" json:"reservation_id"`
	PaymentMethod   *string          `db:"payment_method" json:"payment_method"`
	Amount          *int64           `db:"amount" json:"amount"`
	TransactionID   *string          `db:"transaction_id" json:"transaction_id"`
	PaymentDate     pgtype.Timestamp `db:"payment_date" json:"payment_date"`
	GatewayResponse *string          `db:"gateway_response" json:"gateway_response"`
	Status          *string          `db:"status" json:"status"`
	CreatedAt       pgtype.Timestamp `db:"created_at" json:"created_at"`
	UpdatedAt       pgtype.Timestamp `db:"updated_at" json:"updated_at"`
}

type Reservation struct {
	ID          uuid.UUID             `db:"id" json:"id"`
	PassengerID int64                 `db:"passenger_id" json:"passenger_id"`
	ScheduleID  int64                 `db:"schedule_id" json:"schedule_id"`
	SeatNumber  *int32                `db:"seat_number" json:"seat_number"`
	BookingDate pgtype.Timestamp      `db:"booking_date" json:"booking_date"`
	PaymentID   uuid.UUID             `db:"payment_id" json:"payment_id"`
	Status      NullStatusReservation `db:"status" json:"status"`
	CreatedAt   pgtype.Timestamp      `db:"created_at" json:"created_at"`
	UpdatedAt   pgtype.Timestamp      `db:"updated_at" json:"updated_at"`
}

type Route struct {
	ID                 int64            `db:"id" json:"id"`
	SourceStation      string           `db:"source_station" json:"source_station"`
	DestinationStation string           `db:"destination_station" json:"destination_station"`
	TravelTime         int32            `db:"travel_time" json:"travel_time"`
	CreatedAt          pgtype.Timestamp `db:"created_at" json:"created_at"`
	UpdatedAt          pgtype.Timestamp `db:"updated_at" json:"updated_at"`
}

type Schedule struct {
	ID             int64            `db:"id" json:"id"`
	TrainID        int32            `db:"train_id" json:"train_id"`
	ClassType      TipeClass        `db:"class_type" json:"class_type"`
	DepartureDate  pgtype.Timestamp `db:"departure_date" json:"departure_date"`
	ArrivalDate    pgtype.Timestamp `db:"arrival_date" json:"arrival_date"`
	AvailableSeats int32            `db:"available_seats" json:"available_seats"`
	Price          int64            `db:"price" json:"price"`
	RouteID        int32            `db:"route_id" json:"route_id"`
	CreatedAt      pgtype.Timestamp `db:"created_at" json:"created_at"`
	UpdatedAt      pgtype.Timestamp `db:"updated_at" json:"updated_at"`
}

type Train struct {
	ID        int64            `db:"id" json:"id"`
	Name      string           `db:"name" json:"name"`
	Capacity  int32            `db:"capacity" json:"capacity"`
	CreatedAt pgtype.Timestamp `db:"created_at" json:"created_at"`
	UpdatedAt pgtype.Timestamp `db:"updated_at" json:"updated_at"`
}

type User struct {
	ID          uuid.UUID        `db:"id" json:"id"`
	Name        string           `db:"name" json:"name"`
	Email       string           `db:"email" json:"email"`
	Password    string           `db:"password" json:"password"`
	Phonenumber string           `db:"phonenumber" json:"phonenumber"`
	CreatedAt   pgtype.Timestamp `db:"created_at" json:"created_at"`
	UpdatedAt   pgtype.Timestamp `db:"updated_at" json:"updated_at"`
}
